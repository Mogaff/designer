import { GoogleGenerativeAI, Part } from "@google/generative-ai";
import { log } from "./vite";
import puppeteer from "puppeteer";
import { exec } from "child_process";
import { promisify } from "util";
import * as fs from "fs";
import * as path from "path";

const execAsync = promisify(exec);

// Initialize the Gemini AI with the API key
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");
const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });

type GeminiResponse = {
  htmlContent: string;
  cssStyles: string;
};

interface GenerationOptions {
  prompt: string;
  backgroundImageBase64?: string;
  logoBase64?: string;
  aspectRatio?: string;
  forceSimpleTextLayout?: boolean;
}

/**
 * Generate HTML and CSS for a flyer based on a prompt using Gemini AI
 */
export async function generateFlyerContent(options: GenerationOptions): Promise<GeminiResponse> {
  log("Generating flyer content with Gemini AI", "gemini");
  
  try {
    // Create a comprehensive prompt for the AI with enhanced design instructions
    const systemPrompt = `You are an award-winning professional graphic designer who creates stunning, premium visual flyers. Your designs are used by top brands globally because of your exceptional understanding of visual hierarchy, typography, and attractive layouts.
    
    Create a VISUALLY STUNNING, SOPHISTICATED, and PROFESSIONAL flyer for the following prompt:
    "${options.prompt}"
    
    Focus on CREATIVE DESIGN EXCELLENCE with these requirements:
    1. Create a single HTML page with inline CSS that looks like a high-end professional flyer
    2. Use a clean, modern layout with excellent visual hierarchy
    3. Apply sophisticated typography with carefully selected font combinations
    4. Incorporate creative visual elements and styling (gradients, overlays, shapes)
    5. Ensure the design is balanced, harmonious, and delivers high visual impact
    6. Design for a ${options.aspectRatio || "standard"} format
    7. Ensure ALL TEXT is perfectly centered and readable
    8. Use striking typography and dramatic contrast
    9. Ensure all content is visible within the viewport without scrolling
    
    IMPORTANT OUTPUT FORMAT:
    Respond with ONLY an executable HTML and CSS like a professional graphic designer. Structure your response in JSON format with:
    1. A 'htmlContent' field containing clean, valid HTML
    2. A 'cssStyles' field with any additional CSS styles needed
    
    The design should look like it was created by a professional designer, not generic or template-like.
    If a background image is provided, incorporate it elegantly into the design.`;

    // Add special design instructions based on the aspect ratio
    let aspectRatioDirections = "";
    if (options.aspectRatio) {
      switch (options.aspectRatio) {
        case 'stories':
          aspectRatioDirections = "This is a vertical Stories format (1080×1920). Design with vertical flow, large typography, and ensure key elements are centered.";
          break;
        case 'post':
          aspectRatioDirections = "This is a square social media post (1200×1200). Create a balanced, centered design with equal emphasis on all sides.";
          break;
        case 'fb_cover':
        case 'twitter_header':
          aspectRatioDirections = "This is a wide header/cover format. Design with horizontal flow, and place key elements in the center or left side.";
          break;
        default:
          aspectRatioDirections = `Design specifically for ${options.aspectRatio} format, optimizing visual elements for this aspect ratio.`;
          break;
      }
    }

    const fullPrompt = `${systemPrompt}
    ${aspectRatioDirections}`;

    // Process background image if provided
    const parts: Part[] = [{ text: fullPrompt }];
    
    // Generate the response from Gemini AI
    const result = await model.generateContent({
      contents: [{ role: "user", parts }],
      generationConfig: {
        temperature: 0.4,
        topK: 32,
        topP: 0.95,
        maxOutputTokens: 8192,
      },
    });

    const text = result.response.text();
    log(`Received Gemini response of length: ${text.length}`, "gemini");

    // Parse the JSON from the response
    let responseJson: GeminiResponse;
    try {
      // Extract JSON if it's wrapped in markdown code blocks
      const jsonMatch = text.match(/```(?:json)?(.*?)```/s);
      if (jsonMatch && jsonMatch[1]) {
        responseJson = JSON.parse(jsonMatch[1].trim());
      } else {
        // Try to parse the entire response as JSON
        responseJson = JSON.parse(text);
      }
      
      // Validate the structure
      if (!responseJson.htmlContent || !responseJson.cssStyles) {
        throw new Error("Invalid response structure");
      }
    } catch (error) {
      log(`Failed to parse JSON response: ${error}`, "gemini");
      
      // Fallback: Try to extract HTML and CSS from the text manually
      const htmlMatch = text.match(/<html.*?>([\s\S]*?)<\/html>/i) || 
                        text.match(/<body.*?>([\s\S]*?)<\/body>/i) ||
                        text.match(/(<div.*?>[\s\S]*?<\/div>)/i);
                        
      const cssMatch = text.match(/<style.*?>([\s\S]*?)<\/style>/i) ||
                       text.match(/cssStyles['"]\s*:\s*['"]([^'"]*)['"]/i);
      
      responseJson = {
        htmlContent: htmlMatch ? htmlMatch[0] : `<div class="flyer-content">
          <h1 class="headline">FLYER CONTENT</h1>
          <p>The AI generated content could not be parsed correctly.</p>
        </div>`,
        cssStyles: cssMatch ? cssMatch[1] : `
          .flyer-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            padding: 2rem;
            text-align: center;
            color: white;
          }
          .headline {
            font-size: 3rem;
            margin-bottom: 1rem;
          }
        `
      };
    }

    return responseJson;
  } catch (error) {
    log(`Error generating flyer content: ${error}`, "gemini");
    throw error;
  }
}